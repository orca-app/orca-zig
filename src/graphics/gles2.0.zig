// © 2013-2025 The Khronos Group Inc.
// © 2024 Carl Åstholm
// SPDX-License-Identifier: Apache-2.0 AND MIT

//! Bindings for OpenGL ES 2.0 generated by zigglgen.
//! Modified to rely on external symbols instead of function pointers.

// OpenGL XML API Registry revision: e5778b0a610ccb29df46b2233daed4c1723c08e7
// zigglgen version: 0.4.0

const std = @import("std");
const builtin = @import("builtin");

/// Information about this set of OpenGL bindings.
pub const info = struct {
    pub const api: Api = .gles;
    pub const version_major = 2;
    pub const version_minor = 0;
    pub const profile: ?Profile = null;

    pub const Api = enum { gl, gles, glsc };
    pub const Profile = enum { core, compatibility, common, common_lite };
};

pub const APIENTRY: std.builtin.CallingConvention = if (builtin.os.tag == .windows) .winapi else .c;

//#region Types
pub const bitfield = c_uint;
pub const boolean = u8;
pub const byte = i8;
pub const char = u8;
pub const clampf = f32;
pub const @"enum" = c_uint;
pub const fixed = i32;
pub const float = f32;
pub const int = c_int;
pub const int64 = i64;
pub const intptr = isize;
pub const short = i16;
pub const sizei = c_int;
pub const sizeiptr = isize;
pub const sync = *opaque {};
pub const ubyte = u8;
pub const uint = c_uint;
pub const uint64 = u64;
pub const ushort = u16;
//#endregion Types

//#region Constants
pub const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const ACTIVE_ATTRIBUTES = 0x8B89;
pub const ACTIVE_TEXTURE = 0x84E0;
pub const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const ACTIVE_UNIFORMS = 0x8B86;
pub const ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const ALPHA = 0x1906;
pub const ALPHA_BITS = 0xD55;
pub const ALWAYS = 0x207;
pub const ARRAY_BUFFER = 0x8892;
pub const ARRAY_BUFFER_BINDING = 0x8894;
pub const ATTACHED_SHADERS = 0x8B85;
pub const BACK = 0x405;
pub const BLEND = 0xBE2;
pub const BLEND_COLOR = 0x8005;
pub const BLEND_DST_ALPHA = 0x80CA;
pub const BLEND_DST_RGB = 0x80C8;
pub const BLEND_EQUATION = 0x8009;
pub const BLEND_EQUATION_ALPHA = 0x883D;
pub const BLEND_EQUATION_RGB = 0x8009;
pub const BLEND_SRC_ALPHA = 0x80CB;
pub const BLEND_SRC_RGB = 0x80C9;
pub const BLUE_BITS = 0xD54;
pub const BOOL = 0x8B56;
pub const BOOL_VEC2 = 0x8B57;
pub const BOOL_VEC3 = 0x8B58;
pub const BOOL_VEC4 = 0x8B59;
pub const BUFFER_SIZE = 0x8764;
pub const BUFFER_USAGE = 0x8765;
pub const BYTE = 0x1400;
pub const CCW = 0x901;
pub const CLAMP_TO_EDGE = 0x812F;
pub const COLOR_ATTACHMENT0 = 0x8CE0;
pub const COLOR_BUFFER_BIT = 0x4000;
pub const COLOR_CLEAR_VALUE = 0xC22;
pub const COLOR_WRITEMASK = 0xC23;
pub const COMPILE_STATUS = 0x8B81;
pub const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const CONSTANT_ALPHA = 0x8003;
pub const CONSTANT_COLOR = 0x8001;
pub const CULL_FACE = 0xB44;
pub const CULL_FACE_MODE = 0xB45;
pub const CURRENT_PROGRAM = 0x8B8D;
pub const CURRENT_VERTEX_ATTRIB = 0x8626;
pub const CW = 0x900;
pub const DECR = 0x1E03;
pub const DECR_WRAP = 0x8508;
pub const DELETE_STATUS = 0x8B80;
pub const DEPTH_ATTACHMENT = 0x8D00;
pub const DEPTH_BITS = 0xD56;
pub const DEPTH_BUFFER_BIT = 0x100;
pub const DEPTH_CLEAR_VALUE = 0xB73;
pub const DEPTH_COMPONENT = 0x1902;
pub const DEPTH_COMPONENT16 = 0x81A5;
pub const DEPTH_FUNC = 0xB74;
pub const DEPTH_RANGE = 0xB70;
pub const DEPTH_TEST = 0xB71;
pub const DEPTH_WRITEMASK = 0xB72;
pub const DITHER = 0xBD0;
pub const DONT_CARE = 0x1100;
pub const DST_ALPHA = 0x304;
pub const DST_COLOR = 0x306;
pub const DYNAMIC_DRAW = 0x88E8;
pub const ELEMENT_ARRAY_BUFFER = 0x8893;
pub const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const EQUAL = 0x202;
pub const EXTENSIONS = 0x1F03;
pub const FALSE = 0x0;
pub const FASTEST = 0x1101;
pub const FIXED = 0x140C;
pub const FLOAT = 0x1406;
pub const FLOAT_MAT2 = 0x8B5A;
pub const FLOAT_MAT3 = 0x8B5B;
pub const FLOAT_MAT4 = 0x8B5C;
pub const FLOAT_VEC2 = 0x8B50;
pub const FLOAT_VEC3 = 0x8B51;
pub const FLOAT_VEC4 = 0x8B52;
pub const FRAGMENT_SHADER = 0x8B30;
pub const FRAMEBUFFER = 0x8D40;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const FRAMEBUFFER_BINDING = 0x8CA6;
pub const FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const FRONT = 0x404;
pub const FRONT_AND_BACK = 0x408;
pub const FRONT_FACE = 0xB46;
pub const FUNC_ADD = 0x8006;
pub const FUNC_REVERSE_SUBTRACT = 0x800B;
pub const FUNC_SUBTRACT = 0x800A;
pub const GENERATE_MIPMAP_HINT = 0x8192;
pub const GEQUAL = 0x206;
pub const GREATER = 0x204;
pub const GREEN_BITS = 0xD53;
pub const HIGH_FLOAT = 0x8DF2;
pub const HIGH_INT = 0x8DF5;
pub const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const INCR = 0x1E02;
pub const INCR_WRAP = 0x8507;
pub const INFO_LOG_LENGTH = 0x8B84;
pub const INT = 0x1404;
pub const INT_VEC2 = 0x8B53;
pub const INT_VEC3 = 0x8B54;
pub const INT_VEC4 = 0x8B55;
pub const INVALID_ENUM = 0x500;
pub const INVALID_FRAMEBUFFER_OPERATION = 0x506;
pub const INVALID_OPERATION = 0x502;
pub const INVALID_VALUE = 0x501;
pub const INVERT = 0x150A;
pub const KEEP = 0x1E00;
pub const LEQUAL = 0x203;
pub const LESS = 0x201;
pub const LINE_LOOP = 0x2;
pub const LINE_STRIP = 0x3;
pub const LINE_WIDTH = 0xB21;
pub const LINEAR = 0x2601;
pub const LINEAR_MIPMAP_LINEAR = 0x2703;
pub const LINEAR_MIPMAP_NEAREST = 0x2701;
pub const LINES = 0x1;
pub const LINK_STATUS = 0x8B82;
pub const LOW_FLOAT = 0x8DF0;
pub const LOW_INT = 0x8DF3;
pub const LUMINANCE = 0x1909;
pub const LUMINANCE_ALPHA = 0x190A;
pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const MAX_TEXTURE_SIZE = 0xD33;
pub const MAX_VARYING_VECTORS = 0x8DFC;
pub const MAX_VERTEX_ATTRIBS = 0x8869;
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const MAX_VIEWPORT_DIMS = 0xD3A;
pub const MEDIUM_FLOAT = 0x8DF1;
pub const MEDIUM_INT = 0x8DF4;
pub const MIRRORED_REPEAT = 0x8370;
pub const NEAREST = 0x2600;
pub const NEAREST_MIPMAP_LINEAR = 0x2702;
pub const NEAREST_MIPMAP_NEAREST = 0x2700;
pub const NEVER = 0x200;
pub const NICEST = 0x1102;
pub const NO_ERROR = 0x0;
pub const NONE = 0x0;
pub const NOTEQUAL = 0x205;
pub const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const ONE = 0x1;
pub const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const ONE_MINUS_DST_ALPHA = 0x305;
pub const ONE_MINUS_DST_COLOR = 0x307;
pub const ONE_MINUS_SRC_ALPHA = 0x303;
pub const ONE_MINUS_SRC_COLOR = 0x301;
pub const OUT_OF_MEMORY = 0x505;
pub const PACK_ALIGNMENT = 0xD05;
pub const POINTS = 0x0;
pub const POLYGON_OFFSET_FACTOR = 0x8038;
pub const POLYGON_OFFSET_FILL = 0x8037;
pub const POLYGON_OFFSET_UNITS = 0x2A00;
pub const RED_BITS = 0xD52;
pub const RENDERBUFFER = 0x8D41;
pub const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const RENDERBUFFER_BINDING = 0x8CA7;
pub const RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const RENDERBUFFER_HEIGHT = 0x8D43;
pub const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const RENDERBUFFER_RED_SIZE = 0x8D50;
pub const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const RENDERBUFFER_WIDTH = 0x8D42;
pub const RENDERER = 0x1F01;
pub const REPEAT = 0x2901;
pub const REPLACE = 0x1E01;
pub const RGB = 0x1907;
pub const RGB5_A1 = 0x8057;
pub const RGB565 = 0x8D62;
pub const RGBA = 0x1908;
pub const RGBA4 = 0x8056;
pub const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const SAMPLE_BUFFERS = 0x80A8;
pub const SAMPLE_COVERAGE = 0x80A0;
pub const SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const SAMPLER_2D = 0x8B5E;
pub const SAMPLER_CUBE = 0x8B60;
pub const SAMPLES = 0x80A9;
pub const SCISSOR_BOX = 0xC10;
pub const SCISSOR_TEST = 0xC11;
pub const SHADER_BINARY_FORMATS = 0x8DF8;
pub const SHADER_COMPILER = 0x8DFA;
pub const SHADER_SOURCE_LENGTH = 0x8B88;
pub const SHADER_TYPE = 0x8B4F;
pub const SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const SHORT = 0x1402;
pub const SRC_ALPHA = 0x302;
pub const SRC_ALPHA_SATURATE = 0x308;
pub const SRC_COLOR = 0x300;
pub const STATIC_DRAW = 0x88E4;
pub const STENCIL_ATTACHMENT = 0x8D20;
pub const STENCIL_BACK_FAIL = 0x8801;
pub const STENCIL_BACK_FUNC = 0x8800;
pub const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const STENCIL_BACK_REF = 0x8CA3;
pub const STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const STENCIL_BITS = 0xD57;
pub const STENCIL_BUFFER_BIT = 0x400;
pub const STENCIL_CLEAR_VALUE = 0xB91;
pub const STENCIL_FAIL = 0xB94;
pub const STENCIL_FUNC = 0xB92;
pub const STENCIL_INDEX8 = 0x8D48;
pub const STENCIL_PASS_DEPTH_FAIL = 0xB95;
pub const STENCIL_PASS_DEPTH_PASS = 0xB96;
pub const STENCIL_REF = 0xB97;
pub const STENCIL_TEST = 0xB90;
pub const STENCIL_VALUE_MASK = 0xB93;
pub const STENCIL_WRITEMASK = 0xB98;
pub const STREAM_DRAW = 0x88E0;
pub const SUBPIXEL_BITS = 0xD50;
pub const TEXTURE = 0x1702;
pub const TEXTURE_2D = 0xDE1;
pub const TEXTURE_BINDING_2D = 0x8069;
pub const TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const TEXTURE_CUBE_MAP = 0x8513;
pub const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const TEXTURE_MAG_FILTER = 0x2800;
pub const TEXTURE_MIN_FILTER = 0x2801;
pub const TEXTURE_WRAP_S = 0x2802;
pub const TEXTURE_WRAP_T = 0x2803;
pub const TEXTURE0 = 0x84C0;
pub const TEXTURE1 = 0x84C1;
pub const TEXTURE2 = 0x84C2;
pub const TEXTURE3 = 0x84C3;
pub const TEXTURE4 = 0x84C4;
pub const TEXTURE5 = 0x84C5;
pub const TEXTURE6 = 0x84C6;
pub const TEXTURE7 = 0x84C7;
pub const TEXTURE8 = 0x84C8;
pub const TEXTURE9 = 0x84C9;
pub const TEXTURE10 = 0x84CA;
pub const TEXTURE11 = 0x84CB;
pub const TEXTURE12 = 0x84CC;
pub const TEXTURE13 = 0x84CD;
pub const TEXTURE14 = 0x84CE;
pub const TEXTURE15 = 0x84CF;
pub const TEXTURE16 = 0x84D0;
pub const TEXTURE17 = 0x84D1;
pub const TEXTURE18 = 0x84D2;
pub const TEXTURE19 = 0x84D3;
pub const TEXTURE20 = 0x84D4;
pub const TEXTURE21 = 0x84D5;
pub const TEXTURE22 = 0x84D6;
pub const TEXTURE23 = 0x84D7;
pub const TEXTURE24 = 0x84D8;
pub const TEXTURE25 = 0x84D9;
pub const TEXTURE26 = 0x84DA;
pub const TEXTURE27 = 0x84DB;
pub const TEXTURE28 = 0x84DC;
pub const TEXTURE29 = 0x84DD;
pub const TEXTURE30 = 0x84DE;
pub const TEXTURE31 = 0x84DF;
pub const TRIANGLE_FAN = 0x6;
pub const TRIANGLE_STRIP = 0x5;
pub const TRIANGLES = 0x4;
pub const TRUE = 0x1;
pub const UNPACK_ALIGNMENT = 0xCF5;
pub const UNSIGNED_BYTE = 0x1401;
pub const UNSIGNED_INT = 0x1405;
pub const UNSIGNED_SHORT = 0x1403;
pub const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const VALIDATE_STATUS = 0x8B83;
pub const VENDOR = 0x1F00;
pub const VERSION = 0x1F02;
pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const VERTEX_SHADER = 0x8B31;
pub const VIEWPORT = 0xBA2;
pub const ZERO = 0x0;
//#endregion Constants

//#region Commands
pub const ActiveTexture = glActiveTexture;
extern fn glActiveTexture(texture: @"enum") callconv(APIENTRY) void;
pub const AttachShader = glAttachShader;
extern fn glAttachShader(program: uint, shader: uint) callconv(APIENTRY) void;
pub const BindAttribLocation = glBindAttribLocation;
extern fn glBindAttribLocation(program: uint, index: uint, name: [*:0]const char) callconv(APIENTRY) void;
pub const BindBuffer = glBindBuffer;
extern fn glBindBuffer(target: @"enum", buffer: uint) callconv(APIENTRY) void;
pub const BindFramebuffer = glBindFramebuffer;
extern fn glBindFramebuffer(target: @"enum", framebuffer: uint) callconv(APIENTRY) void;
pub const BindRenderbuffer = glBindRenderbuffer;
extern fn glBindRenderbuffer(target: @"enum", renderbuffer: uint) callconv(APIENTRY) void;
pub const BindTexture = glBindTexture;
extern fn glBindTexture(target: @"enum", texture: uint) callconv(APIENTRY) void;
pub const BlendColor = glBlendColor;
extern fn glBlendColor(red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void;
pub const BlendEquation = glBlendEquation;
extern fn glBlendEquation(mode: @"enum") callconv(APIENTRY) void;
pub const BlendEquationSeparate = glBlendEquationSeparate;
extern fn glBlendEquationSeparate(modeRGB: @"enum", modeAlpha: @"enum") callconv(APIENTRY) void;
pub const BlendFunc = glBlendFunc;
extern fn glBlendFunc(sfactor: @"enum", dfactor: @"enum") callconv(APIENTRY) void;
pub const BlendFuncSeparate = glBlendFuncSeparate;
extern fn glBlendFuncSeparate(sfactorRGB: @"enum", dfactorRGB: @"enum", sfactorAlpha: @"enum", dfactorAlpha: @"enum") callconv(APIENTRY) void;
pub const BufferData = glBufferData;
extern fn glBufferData(target: @"enum", size: sizeiptr, data: ?*const anyopaque, usage: @"enum") callconv(APIENTRY) void;
pub const BufferSubData = glBufferSubData;
extern fn glBufferSubData(target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const CheckFramebufferStatus = glCheckFramebufferStatus;
extern fn glCheckFramebufferStatus(target: @"enum") callconv(APIENTRY) @"enum";
pub const Clear = glClear;
extern fn glClear(mask: bitfield) callconv(APIENTRY) void;
pub const ClearColor = glClearColor;
extern fn glClearColor(red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void;
pub const ClearDepthf = glClearDepthf;
extern fn glClearDepthf(d: float) callconv(APIENTRY) void;
pub const ClearStencil = glClearStencil;
extern fn glClearStencil(s: int) callconv(APIENTRY) void;
pub const ColorMask = glColorMask;
extern fn glColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean) callconv(APIENTRY) void;
pub const CompileShader = glCompileShader;
extern fn glCompileShader(shader: uint) callconv(APIENTRY) void;
pub const CompressedTexImage2D = glCompressedTexImage2D;
extern fn glCompressedTexImage2D(target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const CompressedTexSubImage2D = glCompressedTexSubImage2D;
extern fn glCompressedTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const CopyTexImage2D = glCopyTexImage2D;
extern fn glCopyTexImage2D(target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, height: sizei, border: int) callconv(APIENTRY) void;
pub const CopyTexSubImage2D = glCopyTexSubImage2D;
extern fn glCopyTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
pub const CreateProgram = glCreateProgram;
extern fn glCreateProgram() callconv(APIENTRY) uint;
pub const CreateShader = glCreateShader;
extern fn glCreateShader(@"type": @"enum") callconv(APIENTRY) uint;
pub const CullFace = glCullFace;
extern fn glCullFace(mode: @"enum") callconv(APIENTRY) void;
pub const DeleteBuffers = glDeleteBuffers;
extern fn glDeleteBuffers(n: sizei, buffers: [*]const uint) callconv(APIENTRY) void;
pub const DeleteFramebuffers = glDeleteFramebuffers;
extern fn glDeleteFramebuffers(n: sizei, framebuffers: [*]const uint) callconv(APIENTRY) void;
pub const DeleteProgram = glDeleteProgram;
extern fn glDeleteProgram(program: uint) callconv(APIENTRY) void;
pub const DeleteRenderbuffers = glDeleteRenderbuffers;
extern fn glDeleteRenderbuffers(n: sizei, renderbuffers: [*]const uint) callconv(APIENTRY) void;
pub const DeleteShader = glDeleteShader;
extern fn glDeleteShader(shader: uint) callconv(APIENTRY) void;
pub const DeleteTextures = glDeleteTextures;
extern fn glDeleteTextures(n: sizei, textures: [*]const uint) callconv(APIENTRY) void;
pub const DepthFunc = glDepthFunc;
extern fn glDepthFunc(func: @"enum") callconv(APIENTRY) void;
pub const DepthMask = glDepthMask;
extern fn glDepthMask(flag: boolean) callconv(APIENTRY) void;
pub const DepthRangef = glDepthRangef;
extern fn glDepthRangef(n: float, f: float) callconv(APIENTRY) void;
pub const DetachShader = glDetachShader;
extern fn glDetachShader(program: uint, shader: uint) callconv(APIENTRY) void;
pub const Disable = glDisable;
extern fn glDisable(cap: @"enum") callconv(APIENTRY) void;
pub const DisableVertexAttribArray = glDisableVertexAttribArray;
extern fn glDisableVertexAttribArray(index: uint) callconv(APIENTRY) void;
pub const DrawArrays = glDrawArrays;
extern fn glDrawArrays(mode: @"enum", first: int, count: sizei) callconv(APIENTRY) void;
pub const DrawElements = glDrawElements;
extern fn glDrawElements(mode: @"enum", count: sizei, @"type": @"enum", indices: usize) callconv(APIENTRY) void;
pub const Enable = glEnable;
extern fn glEnable(cap: @"enum") callconv(APIENTRY) void;
pub const EnableVertexAttribArray = glEnableVertexAttribArray;
extern fn glEnableVertexAttribArray(index: uint) callconv(APIENTRY) void;
pub const Finish = glFinish;
extern fn glFinish() callconv(APIENTRY) void;
pub const Flush = glFlush;
extern fn glFlush() callconv(APIENTRY) void;
pub const FramebufferRenderbuffer = glFramebufferRenderbuffer;
extern fn glFramebufferRenderbuffer(target: @"enum", attachment: @"enum", renderbuffertarget: @"enum", renderbuffer: uint) callconv(APIENTRY) void;
pub const FramebufferTexture2D = glFramebufferTexture2D;
extern fn glFramebufferTexture2D(target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int) callconv(APIENTRY) void;
pub const FrontFace = glFrontFace;
extern fn glFrontFace(mode: @"enum") callconv(APIENTRY) void;
pub const GenBuffers = glGenBuffers;
extern fn glGenBuffers(n: sizei, buffers: [*]uint) callconv(APIENTRY) void;
pub const GenFramebuffers = glGenFramebuffers;
extern fn glGenFramebuffers(n: sizei, framebuffers: [*]uint) callconv(APIENTRY) void;
pub const GenRenderbuffers = glGenRenderbuffers;
extern fn glGenRenderbuffers(n: sizei, renderbuffers: [*]uint) callconv(APIENTRY) void;
pub const GenTextures = glGenTextures;
extern fn glGenTextures(n: sizei, textures: [*]uint) callconv(APIENTRY) void;
pub const GenerateMipmap = glGenerateMipmap;
extern fn glGenerateMipmap(target: @"enum") callconv(APIENTRY) void;
pub const GetActiveAttrib = glGetActiveAttrib;
extern fn glGetActiveAttrib(program: uint, index: uint, bufSize: sizei, length: [*c]sizei, size: [*c]int, @"type": [*c]@"enum", name: [*c]char) callconv(APIENTRY) void;
pub const GetActiveUniform = glGetActiveUniform;
extern fn glGetActiveUniform(program: uint, index: uint, bufSize: sizei, length: [*c]sizei, size: [*c]int, @"type": [*c]@"enum", name: [*c]char) callconv(APIENTRY) void;
pub const GetAttachedShaders = glGetAttachedShaders;
extern fn glGetAttachedShaders(program: uint, maxCount: sizei, count: [*c]sizei, shaders: [*c]uint) callconv(APIENTRY) void;
pub const GetAttribLocation = glGetAttribLocation;
extern fn glGetAttribLocation(program: uint, name: [*:0]const char) callconv(APIENTRY) int;
pub const GetBooleanv = glGetBooleanv;
extern fn glGetBooleanv(pname: @"enum", data: [*]boolean) callconv(APIENTRY) void;
pub const GetBufferParameteriv = glGetBufferParameteriv;
extern fn glGetBufferParameteriv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetError = glGetError;
extern fn glGetError() callconv(APIENTRY) @"enum";
pub const GetFloatv = glGetFloatv;
extern fn glGetFloatv(pname: @"enum", data: [*]float) callconv(APIENTRY) void;
pub const GetFramebufferAttachmentParameteriv = glGetFramebufferAttachmentParameteriv;
extern fn glGetFramebufferAttachmentParameteriv(target: @"enum", attachment: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetIntegerv = glGetIntegerv;
extern fn glGetIntegerv(pname: @"enum", data: [*]int) callconv(APIENTRY) void;
pub const GetProgramiv = glGetProgramiv;
extern fn glGetProgramiv(program: uint, pname: @"enum", param: *int) callconv(APIENTRY) void;
pub const GetProgramInfoLog = glGetProgramInfoLog;
extern fn glGetProgramInfoLog(program: uint, bufSize: sizei, length: ?*sizei, infoLog: [*]char) callconv(APIENTRY) void;
pub const GetRenderbufferParameteriv = glGetRenderbufferParameteriv;
extern fn glGetRenderbufferParameteriv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetShaderiv = glGetShaderiv;
extern fn glGetShaderiv(shader: uint, pname: @"enum", param: *int) callconv(APIENTRY) void;
pub const GetShaderInfoLog = glGetShaderInfoLog;
extern fn glGetShaderInfoLog(shader: uint, bufSize: sizei, length: ?*sizei, infoLog: [*]char) callconv(APIENTRY) void;
pub const GetShaderPrecisionFormat = glGetShaderPrecisionFormat;
extern fn glGetShaderPrecisionFormat(shadertype: @"enum", precisiontype: @"enum", range: *[2]int, precision: *int) callconv(APIENTRY) void;
pub const GetShaderSource = glGetShaderSource;
extern fn glGetShaderSource(shader: uint, bufSize: sizei, length: ?*sizei, source: [*]char) callconv(APIENTRY) void;
pub const GetString = glGetString;
extern fn glGetString(name: @"enum") callconv(APIENTRY) ?[*:0]const ubyte;
pub const GetTexParameterfv = glGetTexParameterfv;
extern fn glGetTexParameterfv(target: @"enum", pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetTexParameteriv = glGetTexParameteriv;
extern fn glGetTexParameteriv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetUniformfv = glGetUniformfv;
extern fn glGetUniformfv(program: uint, location: int, params: [*c]float) callconv(APIENTRY) void;
pub const GetUniformiv = glGetUniformiv;
extern fn glGetUniformiv(program: uint, location: int, params: [*c]int) callconv(APIENTRY) void;
pub const GetUniformLocation = glGetUniformLocation;
extern fn glGetUniformLocation(program: uint, name: [*:0]const char) callconv(APIENTRY) int;
pub const GetVertexAttribfv = glGetVertexAttribfv;
extern fn glGetVertexAttribfv(index: uint, pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetVertexAttribiv = glGetVertexAttribiv;
extern fn glGetVertexAttribiv(index: uint, pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetVertexAttribPointerv = glGetVertexAttribPointerv;
extern fn glGetVertexAttribPointerv(index: uint, pname: @"enum", pointer: [*c]?*anyopaque) callconv(APIENTRY) void;
pub const Hint = glHint;
extern fn glHint(target: @"enum", mode: @"enum") callconv(APIENTRY) void;
pub const IsBuffer = glIsBuffer;
extern fn glIsBuffer(buffer: uint) callconv(APIENTRY) boolean;
pub const IsEnabled = glIsEnabled;
extern fn glIsEnabled(cap: @"enum") callconv(APIENTRY) boolean;
pub const IsFramebuffer = glIsFramebuffer;
extern fn glIsFramebuffer(framebuffer: uint) callconv(APIENTRY) boolean;
pub const IsProgram = glIsProgram;
extern fn glIsProgram(program: uint) callconv(APIENTRY) boolean;
pub const IsRenderbuffer = glIsRenderbuffer;
extern fn glIsRenderbuffer(renderbuffer: uint) callconv(APIENTRY) boolean;
pub const IsShader = glIsShader;
extern fn glIsShader(shader: uint) callconv(APIENTRY) boolean;
pub const IsTexture = glIsTexture;
extern fn glIsTexture(texture: uint) callconv(APIENTRY) boolean;
pub const LineWidth = glLineWidth;
extern fn glLineWidth(width: float) callconv(APIENTRY) void;
pub const LinkProgram = glLinkProgram;
extern fn glLinkProgram(program: uint) callconv(APIENTRY) void;
pub const PixelStorei = glPixelStorei;
extern fn glPixelStorei(pname: @"enum", param: int) callconv(APIENTRY) void;
pub const PolygonOffset = glPolygonOffset;
extern fn glPolygonOffset(factor: float, units: float) callconv(APIENTRY) void;
pub const ReadPixels = glReadPixels;
extern fn glReadPixels(x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*anyopaque) callconv(APIENTRY) void;
pub const ReleaseShaderCompiler = glReleaseShaderCompiler;
extern fn glReleaseShaderCompiler() callconv(APIENTRY) void;
pub const RenderbufferStorage = glRenderbufferStorage;
extern fn glRenderbufferStorage(target: @"enum", internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void;
pub const SampleCoverage = glSampleCoverage;
extern fn glSampleCoverage(value: float, invert: boolean) callconv(APIENTRY) void;
pub const Scissor = glScissor;
extern fn glScissor(x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
pub const ShaderBinary = glShaderBinary;
extern fn glShaderBinary(count: sizei, shaders: [*c]const uint, binaryFormat: @"enum", binary: ?*const anyopaque, length: sizei) callconv(APIENTRY) void;
pub const ShaderSource = glShaderSource;
extern fn glShaderSource(shader: uint, count: sizei, strings: [*]const [*]const char, lengths: ?[*]const int) callconv(APIENTRY) void;
pub const StencilFunc = glStencilFunc;
extern fn glStencilFunc(func: @"enum", ref: int, mask: uint) callconv(APIENTRY) void;
pub const StencilFuncSeparate = glStencilFuncSeparate;
extern fn glStencilFuncSeparate(face: @"enum", func: @"enum", ref: int, mask: uint) callconv(APIENTRY) void;
pub const StencilMask = glStencilMask;
extern fn glStencilMask(mask: uint) callconv(APIENTRY) void;
pub const StencilMaskSeparate = glStencilMaskSeparate;
extern fn glStencilMaskSeparate(face: @"enum", mask: uint) callconv(APIENTRY) void;
pub const StencilOp = glStencilOp;
extern fn glStencilOp(fail: @"enum", zfail: @"enum", zpass: @"enum") callconv(APIENTRY) void;
pub const StencilOpSeparate = glStencilOpSeparate;
extern fn glStencilOpSeparate(face: @"enum", sfail: @"enum", dpfail: @"enum", dppass: @"enum") callconv(APIENTRY) void;
pub const TexImage2D = glTexImage2D;
extern fn glTexImage2D(target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void;
pub const TexParameterf = glTexParameterf;
extern fn glTexParameterf(target: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void;
pub const TexParameterfv = glTexParameterfv;
extern fn glTexParameterfv(target: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const TexParameteri = glTexParameteri;
extern fn glTexParameteri(target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void;
pub const TexParameteriv = glTexParameteriv;
extern fn glTexParameteriv(target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void;
pub const TexSubImage2D = glTexSubImage2D;
extern fn glTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void;
pub const Uniform1f = glUniform1f;
extern fn glUniform1f(location: int, v0: float) callconv(APIENTRY) void;
pub const Uniform1fv = glUniform1fv;
extern fn glUniform1fv(location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void;
pub const Uniform1i = glUniform1i;
extern fn glUniform1i(location: int, v0: int) callconv(APIENTRY) void;
pub const Uniform1iv = glUniform1iv;
extern fn glUniform1iv(location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void;
pub const Uniform2f = glUniform2f;
extern fn glUniform2f(location: int, v0: float, v1: float) callconv(APIENTRY) void;
pub const Uniform2fv = glUniform2fv;
extern fn glUniform2fv(location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void;
pub const Uniform2i = glUniform2i;
extern fn glUniform2i(location: int, v0: int, v1: int) callconv(APIENTRY) void;
pub const Uniform2iv = glUniform2iv;
extern fn glUniform2iv(location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void;
pub const Uniform3f = glUniform3f;
extern fn glUniform3f(location: int, v0: float, v1: float, v2: float) callconv(APIENTRY) void;
pub const Uniform3fv = glUniform3fv;
extern fn glUniform3fv(location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void;
pub const Uniform3i = glUniform3i;
extern fn glUniform3i(location: int, v0: int, v1: int, v2: int) callconv(APIENTRY) void;
pub const Uniform3iv = glUniform3iv;
extern fn glUniform3iv(location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void;
pub const Uniform4f = glUniform4f;
extern fn glUniform4f(location: int, v0: float, v1: float, v2: float, v3: float) callconv(APIENTRY) void;
pub const Uniform4fv = glUniform4fv;
extern fn glUniform4fv(location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void;
pub const Uniform4i = glUniform4i;
extern fn glUniform4i(location: int, v0: int, v1: int, v2: int, v3: int) callconv(APIENTRY) void;
pub const Uniform4iv = glUniform4iv;
extern fn glUniform4iv(location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void;
pub const UniformMatrix2fv = glUniformMatrix2fv;
extern fn glUniformMatrix2fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void;
pub const UniformMatrix3fv = glUniformMatrix3fv;
extern fn glUniformMatrix3fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void;
pub const UniformMatrix4fv = glUniformMatrix4fv;
extern fn glUniformMatrix4fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void;
pub const UseProgram = glUseProgram;
extern fn glUseProgram(program: uint) callconv(APIENTRY) void;
pub const ValidateProgram = glValidateProgram;
extern fn glValidateProgram(program: uint) callconv(APIENTRY) void;
pub const VertexAttrib1f = glVertexAttrib1f;
extern fn glVertexAttrib1f(index: uint, x: float) callconv(APIENTRY) void;
pub const VertexAttrib1fv = glVertexAttrib1fv;
extern fn glVertexAttrib1fv(index: uint, v: [*c]const float) callconv(APIENTRY) void;
pub const VertexAttrib2f = glVertexAttrib2f;
extern fn glVertexAttrib2f(index: uint, x: float, y: float) callconv(APIENTRY) void;
pub const VertexAttrib2fv = glVertexAttrib2fv;
extern fn glVertexAttrib2fv(index: uint, v: [*c]const float) callconv(APIENTRY) void;
pub const VertexAttrib3f = glVertexAttrib3f;
extern fn glVertexAttrib3f(index: uint, x: float, y: float, z: float) callconv(APIENTRY) void;
pub const VertexAttrib3fv = glVertexAttrib3fv;
extern fn glVertexAttrib3fv(index: uint, v: [*c]const float) callconv(APIENTRY) void;
pub const VertexAttrib4f = glVertexAttrib4f;
extern fn glVertexAttrib4f(index: uint, x: float, y: float, z: float, w: float) callconv(APIENTRY) void;
pub const VertexAttrib4fv = glVertexAttrib4fv;
extern fn glVertexAttrib4fv(index: uint, v: [*c]const float) callconv(APIENTRY) void;
pub const VertexAttribPointer = glVertexAttribPointer;
extern fn glVertexAttribPointer(index: uint, size: int, @"type": @"enum", normalized: boolean, stride: sizei, pointer: usize) callconv(APIENTRY) void;
pub const Viewport = glViewport;
extern fn glViewport(x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
//#endregion Commands

test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDeclsRecursive(@This());
}
