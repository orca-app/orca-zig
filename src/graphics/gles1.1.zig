// © 2013-2025 The Khronos Group Inc.
// © 2024 Carl Åstholm
// SPDX-License-Identifier: Apache-2.0 AND MIT

//! Bindings for OpenGL ES 1.1 (Common profile) generated by zigglgen.
//! Modified to rely on external symbols instead of function pointers.

// OpenGL XML API Registry revision: e5778b0a610ccb29df46b2233daed4c1723c08e7
// zigglgen version: 0.4.0

const std = @import("std");
const builtin = @import("builtin");

/// Information about this set of OpenGL bindings.
pub const info = struct {
    pub const api: Api = .gles;
    pub const version_major = 1;
    pub const version_minor = 1;
    pub const profile: ?Profile = .common;

    pub const Api = enum { gl, gles, glsc };
    pub const Profile = enum { core, compatibility, common, common_lite };
};

pub const APIENTRY: std.builtin.CallingConvention = if (builtin.os.tag == .windows) .winapi else .c;

//#region Types
pub const bitfield = c_uint;
pub const boolean = u8;
pub const byte = i8;
pub const clampf = f32;
pub const clampx = i32;
pub const @"enum" = c_uint;
pub const fixed = i32;
pub const float = f32;
pub const int = c_int;
pub const intptr = isize;
pub const short = i16;
pub const sizei = c_int;
pub const sizeiptr = isize;
pub const ubyte = u8;
pub const uint = c_uint;
pub const ushort = u16;
//#endregion Types

//#region Constants
pub const ACTIVE_TEXTURE = 0x84E0;
pub const ADD = 0x104;
pub const ADD_SIGNED = 0x8574;
pub const ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const ALPHA = 0x1906;
pub const ALPHA_BITS = 0xD55;
pub const ALPHA_SCALE = 0xD1C;
pub const ALPHA_TEST = 0xBC0;
pub const ALPHA_TEST_FUNC = 0xBC1;
pub const ALPHA_TEST_REF = 0xBC2;
pub const ALWAYS = 0x207;
pub const AMBIENT = 0x1200;
pub const AMBIENT_AND_DIFFUSE = 0x1602;
pub const AND = 0x1501;
pub const AND_INVERTED = 0x1504;
pub const AND_REVERSE = 0x1502;
pub const ARRAY_BUFFER = 0x8892;
pub const ARRAY_BUFFER_BINDING = 0x8894;
pub const BACK = 0x405;
pub const BLEND = 0xBE2;
pub const BLEND_DST = 0xBE0;
pub const BLEND_SRC = 0xBE1;
pub const BLUE_BITS = 0xD54;
pub const BUFFER_SIZE = 0x8764;
pub const BUFFER_USAGE = 0x8765;
pub const BYTE = 0x1400;
pub const CCW = 0x901;
pub const CLAMP_TO_EDGE = 0x812F;
pub const CLEAR = 0x1500;
pub const CLIENT_ACTIVE_TEXTURE = 0x84E1;
pub const CLIP_PLANE0 = 0x3000;
pub const CLIP_PLANE1 = 0x3001;
pub const CLIP_PLANE2 = 0x3002;
pub const CLIP_PLANE3 = 0x3003;
pub const CLIP_PLANE4 = 0x3004;
pub const CLIP_PLANE5 = 0x3005;
pub const COLOR_ARRAY = 0x8076;
pub const COLOR_ARRAY_BUFFER_BINDING = 0x8898;
pub const COLOR_ARRAY_POINTER = 0x8090;
pub const COLOR_ARRAY_SIZE = 0x8081;
pub const COLOR_ARRAY_STRIDE = 0x8083;
pub const COLOR_ARRAY_TYPE = 0x8082;
pub const COLOR_BUFFER_BIT = 0x4000;
pub const COLOR_CLEAR_VALUE = 0xC22;
pub const COLOR_LOGIC_OP = 0xBF2;
pub const COLOR_MATERIAL = 0xB57;
pub const COLOR_WRITEMASK = 0xC23;
pub const COMBINE = 0x8570;
pub const COMBINE_ALPHA = 0x8572;
pub const COMBINE_RGB = 0x8571;
pub const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const CONSTANT = 0x8576;
pub const CONSTANT_ATTENUATION = 0x1207;
pub const COPY = 0x1503;
pub const COPY_INVERTED = 0x150C;
pub const CULL_FACE = 0xB44;
pub const CULL_FACE_MODE = 0xB45;
pub const CURRENT_COLOR = 0xB00;
pub const CURRENT_NORMAL = 0xB02;
pub const CURRENT_TEXTURE_COORDS = 0xB03;
pub const CW = 0x900;
pub const DECAL = 0x2101;
pub const DECR = 0x1E03;
pub const DEPTH_BITS = 0xD56;
pub const DEPTH_BUFFER_BIT = 0x100;
pub const DEPTH_CLEAR_VALUE = 0xB73;
pub const DEPTH_FUNC = 0xB74;
pub const DEPTH_RANGE = 0xB70;
pub const DEPTH_TEST = 0xB71;
pub const DEPTH_WRITEMASK = 0xB72;
pub const DIFFUSE = 0x1201;
pub const DITHER = 0xBD0;
pub const DONT_CARE = 0x1100;
pub const DOT3_RGB = 0x86AE;
pub const DOT3_RGBA = 0x86AF;
pub const DST_ALPHA = 0x304;
pub const DST_COLOR = 0x306;
pub const DYNAMIC_DRAW = 0x88E8;
pub const ELEMENT_ARRAY_BUFFER = 0x8893;
pub const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const EMISSION = 0x1600;
pub const EQUAL = 0x202;
pub const EQUIV = 0x1509;
pub const EXP = 0x800;
pub const EXP2 = 0x801;
pub const EXTENSIONS = 0x1F03;
pub const FALSE = 0x0;
pub const FASTEST = 0x1101;
pub const FIXED = 0x140C;
pub const FLAT = 0x1D00;
pub const FLOAT = 0x1406;
pub const FOG = 0xB60;
pub const FOG_COLOR = 0xB66;
pub const FOG_DENSITY = 0xB62;
pub const FOG_END = 0xB64;
pub const FOG_HINT = 0xC54;
pub const FOG_MODE = 0xB65;
pub const FOG_START = 0xB63;
pub const FRONT = 0x404;
pub const FRONT_AND_BACK = 0x408;
pub const FRONT_FACE = 0xB46;
pub const GENERATE_MIPMAP = 0x8191;
pub const GENERATE_MIPMAP_HINT = 0x8192;
pub const GEQUAL = 0x206;
pub const GREATER = 0x204;
pub const GREEN_BITS = 0xD53;
pub const INCR = 0x1E02;
pub const INTERPOLATE = 0x8575;
pub const INVALID_ENUM = 0x500;
pub const INVALID_OPERATION = 0x502;
pub const INVALID_VALUE = 0x501;
pub const INVERT = 0x150A;
pub const KEEP = 0x1E00;
pub const LEQUAL = 0x203;
pub const LESS = 0x201;
pub const LIGHT_MODEL_AMBIENT = 0xB53;
pub const LIGHT_MODEL_TWO_SIDE = 0xB52;
pub const LIGHT0 = 0x4000;
pub const LIGHT1 = 0x4001;
pub const LIGHT2 = 0x4002;
pub const LIGHT3 = 0x4003;
pub const LIGHT4 = 0x4004;
pub const LIGHT5 = 0x4005;
pub const LIGHT6 = 0x4006;
pub const LIGHT7 = 0x4007;
pub const LIGHTING = 0xB50;
pub const LINE_LOOP = 0x2;
pub const LINE_SMOOTH = 0xB20;
pub const LINE_SMOOTH_HINT = 0xC52;
pub const LINE_STRIP = 0x3;
pub const LINE_WIDTH = 0xB21;
pub const LINEAR = 0x2601;
pub const LINEAR_ATTENUATION = 0x1208;
pub const LINEAR_MIPMAP_LINEAR = 0x2703;
pub const LINEAR_MIPMAP_NEAREST = 0x2701;
pub const LINES = 0x1;
pub const LOGIC_OP_MODE = 0xBF0;
pub const LUMINANCE = 0x1909;
pub const LUMINANCE_ALPHA = 0x190A;
pub const MATRIX_MODE = 0xBA0;
pub const MAX_CLIP_PLANES = 0xD32;
pub const MAX_LIGHTS = 0xD31;
pub const MAX_MODELVIEW_STACK_DEPTH = 0xD36;
pub const MAX_PROJECTION_STACK_DEPTH = 0xD38;
pub const MAX_TEXTURE_SIZE = 0xD33;
pub const MAX_TEXTURE_STACK_DEPTH = 0xD39;
pub const MAX_TEXTURE_UNITS = 0x84E2;
pub const MAX_VIEWPORT_DIMS = 0xD3A;
pub const MODELVIEW = 0x1700;
pub const MODELVIEW_MATRIX = 0xBA6;
pub const MODELVIEW_STACK_DEPTH = 0xBA3;
pub const MODULATE = 0x2100;
pub const MULTISAMPLE = 0x809D;
pub const NAND = 0x150E;
pub const NEAREST = 0x2600;
pub const NEAREST_MIPMAP_LINEAR = 0x2702;
pub const NEAREST_MIPMAP_NEAREST = 0x2700;
pub const NEVER = 0x200;
pub const NICEST = 0x1102;
pub const NO_ERROR = 0x0;
pub const NOOP = 0x1505;
pub const NOR = 0x1508;
pub const NORMAL_ARRAY = 0x8075;
pub const NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
pub const NORMAL_ARRAY_POINTER = 0x808F;
pub const NORMAL_ARRAY_STRIDE = 0x807F;
pub const NORMAL_ARRAY_TYPE = 0x807E;
pub const NORMALIZE = 0xBA1;
pub const NOTEQUAL = 0x205;
pub const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const ONE = 0x1;
pub const ONE_MINUS_DST_ALPHA = 0x305;
pub const ONE_MINUS_DST_COLOR = 0x307;
pub const ONE_MINUS_SRC_ALPHA = 0x303;
pub const ONE_MINUS_SRC_COLOR = 0x301;
pub const OPERAND0_ALPHA = 0x8598;
pub const OPERAND0_RGB = 0x8590;
pub const OPERAND1_ALPHA = 0x8599;
pub const OPERAND1_RGB = 0x8591;
pub const OPERAND2_ALPHA = 0x859A;
pub const OPERAND2_RGB = 0x8592;
pub const OR = 0x1507;
pub const OR_INVERTED = 0x150D;
pub const OR_REVERSE = 0x150B;
pub const OUT_OF_MEMORY = 0x505;
pub const PACK_ALIGNMENT = 0xD05;
pub const PERSPECTIVE_CORRECTION_HINT = 0xC50;
pub const POINT_DISTANCE_ATTENUATION = 0x8129;
pub const POINT_FADE_THRESHOLD_SIZE = 0x8128;
pub const POINT_SIZE = 0xB11;
pub const POINT_SIZE_MAX = 0x8127;
pub const POINT_SIZE_MIN = 0x8126;
pub const POINT_SMOOTH = 0xB10;
pub const POINT_SMOOTH_HINT = 0xC51;
pub const POINTS = 0x0;
pub const POLYGON_OFFSET_FACTOR = 0x8038;
pub const POLYGON_OFFSET_FILL = 0x8037;
pub const POLYGON_OFFSET_UNITS = 0x2A00;
pub const POSITION = 0x1203;
pub const PREVIOUS = 0x8578;
pub const PRIMARY_COLOR = 0x8577;
pub const PROJECTION = 0x1701;
pub const PROJECTION_MATRIX = 0xBA7;
pub const PROJECTION_STACK_DEPTH = 0xBA4;
pub const QUADRATIC_ATTENUATION = 0x1209;
pub const RED_BITS = 0xD52;
pub const RENDERER = 0x1F01;
pub const REPEAT = 0x2901;
pub const REPLACE = 0x1E01;
pub const RESCALE_NORMAL = 0x803A;
pub const RGB = 0x1907;
pub const RGB_SCALE = 0x8573;
pub const RGBA = 0x1908;
pub const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const SAMPLE_ALPHA_TO_ONE = 0x809F;
pub const SAMPLE_BUFFERS = 0x80A8;
pub const SAMPLE_COVERAGE = 0x80A0;
pub const SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const SAMPLES = 0x80A9;
pub const SCISSOR_BOX = 0xC10;
pub const SCISSOR_TEST = 0xC11;
pub const SET = 0x150F;
pub const SHADE_MODEL = 0xB54;
pub const SHININESS = 0x1601;
pub const SHORT = 0x1402;
pub const SMOOTH = 0x1D01;
pub const SMOOTH_LINE_WIDTH_RANGE = 0xB22;
pub const SMOOTH_POINT_SIZE_RANGE = 0xB12;
pub const SPECULAR = 0x1202;
pub const SPOT_CUTOFF = 0x1206;
pub const SPOT_DIRECTION = 0x1204;
pub const SPOT_EXPONENT = 0x1205;
pub const SRC_ALPHA = 0x302;
pub const SRC_ALPHA_SATURATE = 0x308;
pub const SRC_COLOR = 0x300;
pub const SRC0_ALPHA = 0x8588;
pub const SRC0_RGB = 0x8580;
pub const SRC1_ALPHA = 0x8589;
pub const SRC1_RGB = 0x8581;
pub const SRC2_ALPHA = 0x858A;
pub const SRC2_RGB = 0x8582;
pub const STACK_OVERFLOW = 0x503;
pub const STACK_UNDERFLOW = 0x504;
pub const STATIC_DRAW = 0x88E4;
pub const STENCIL_BITS = 0xD57;
pub const STENCIL_BUFFER_BIT = 0x400;
pub const STENCIL_CLEAR_VALUE = 0xB91;
pub const STENCIL_FAIL = 0xB94;
pub const STENCIL_FUNC = 0xB92;
pub const STENCIL_PASS_DEPTH_FAIL = 0xB95;
pub const STENCIL_PASS_DEPTH_PASS = 0xB96;
pub const STENCIL_REF = 0xB97;
pub const STENCIL_TEST = 0xB90;
pub const STENCIL_VALUE_MASK = 0xB93;
pub const STENCIL_WRITEMASK = 0xB98;
pub const SUBPIXEL_BITS = 0xD50;
pub const SUBTRACT = 0x84E7;
pub const TEXTURE = 0x1702;
pub const TEXTURE_2D = 0xDE1;
pub const TEXTURE_BINDING_2D = 0x8069;
pub const TEXTURE_COORD_ARRAY = 0x8078;
pub const TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
pub const TEXTURE_COORD_ARRAY_POINTER = 0x8092;
pub const TEXTURE_COORD_ARRAY_SIZE = 0x8088;
pub const TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
pub const TEXTURE_COORD_ARRAY_TYPE = 0x8089;
pub const TEXTURE_ENV = 0x2300;
pub const TEXTURE_ENV_COLOR = 0x2201;
pub const TEXTURE_ENV_MODE = 0x2200;
pub const TEXTURE_MAG_FILTER = 0x2800;
pub const TEXTURE_MATRIX = 0xBA8;
pub const TEXTURE_MIN_FILTER = 0x2801;
pub const TEXTURE_STACK_DEPTH = 0xBA5;
pub const TEXTURE_WRAP_S = 0x2802;
pub const TEXTURE_WRAP_T = 0x2803;
pub const TEXTURE0 = 0x84C0;
pub const TEXTURE1 = 0x84C1;
pub const TEXTURE2 = 0x84C2;
pub const TEXTURE3 = 0x84C3;
pub const TEXTURE4 = 0x84C4;
pub const TEXTURE5 = 0x84C5;
pub const TEXTURE6 = 0x84C6;
pub const TEXTURE7 = 0x84C7;
pub const TEXTURE8 = 0x84C8;
pub const TEXTURE9 = 0x84C9;
pub const TEXTURE10 = 0x84CA;
pub const TEXTURE11 = 0x84CB;
pub const TEXTURE12 = 0x84CC;
pub const TEXTURE13 = 0x84CD;
pub const TEXTURE14 = 0x84CE;
pub const TEXTURE15 = 0x84CF;
pub const TEXTURE16 = 0x84D0;
pub const TEXTURE17 = 0x84D1;
pub const TEXTURE18 = 0x84D2;
pub const TEXTURE19 = 0x84D3;
pub const TEXTURE20 = 0x84D4;
pub const TEXTURE21 = 0x84D5;
pub const TEXTURE22 = 0x84D6;
pub const TEXTURE23 = 0x84D7;
pub const TEXTURE24 = 0x84D8;
pub const TEXTURE25 = 0x84D9;
pub const TEXTURE26 = 0x84DA;
pub const TEXTURE27 = 0x84DB;
pub const TEXTURE28 = 0x84DC;
pub const TEXTURE29 = 0x84DD;
pub const TEXTURE30 = 0x84DE;
pub const TEXTURE31 = 0x84DF;
pub const TRIANGLE_FAN = 0x6;
pub const TRIANGLE_STRIP = 0x5;
pub const TRIANGLES = 0x4;
pub const TRUE = 0x1;
pub const UNPACK_ALIGNMENT = 0xCF5;
pub const UNSIGNED_BYTE = 0x1401;
pub const UNSIGNED_SHORT = 0x1403;
pub const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const VENDOR = 0x1F00;
pub const VERSION = 0x1F02;
pub const VERSION_ES_CL_1_0 = 0x1;
pub const VERSION_ES_CL_1_1 = 0x1;
pub const VERSION_ES_CM_1_1 = 0x1;
pub const VERTEX_ARRAY = 0x8074;
pub const VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
pub const VERTEX_ARRAY_POINTER = 0x808E;
pub const VERTEX_ARRAY_SIZE = 0x807A;
pub const VERTEX_ARRAY_STRIDE = 0x807C;
pub const VERTEX_ARRAY_TYPE = 0x807B;
pub const VIEWPORT = 0xBA2;
pub const XOR = 0x1506;
pub const ZERO = 0x0;
//#endregion Constants

//#region Commands
pub const ActiveTexture = glActiveTexture;
extern fn glActiveTexture(texture: @"enum") callconv(APIENTRY) void;
pub const AlphaFunc = glAlphaFunc;
extern fn glAlphaFunc(func: @"enum", ref: float) callconv(APIENTRY) void;
pub const AlphaFuncx = glAlphaFuncx;
extern fn glAlphaFuncx(func: @"enum", ref: fixed) callconv(APIENTRY) void;
pub const BindBuffer = glBindBuffer;
extern fn glBindBuffer(target: @"enum", buffer: uint) callconv(APIENTRY) void;
pub const BindTexture = glBindTexture;
extern fn glBindTexture(target: @"enum", texture: uint) callconv(APIENTRY) void;
pub const BlendFunc = glBlendFunc;
extern fn glBlendFunc(sfactor: @"enum", dfactor: @"enum") callconv(APIENTRY) void;
pub const BufferData = glBufferData;
extern fn glBufferData(target: @"enum", size: sizeiptr, data: ?*const anyopaque, usage: @"enum") callconv(APIENTRY) void;
pub const BufferSubData = glBufferSubData;
extern fn glBufferSubData(target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const Clear = glClear;
extern fn glClear(mask: bitfield) callconv(APIENTRY) void;
pub const ClearColor = glClearColor;
extern fn glClearColor(red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void;
pub const ClearColorx = glClearColorx;
extern fn glClearColorx(red: fixed, green: fixed, blue: fixed, alpha: fixed) callconv(APIENTRY) void;
pub const ClearDepthf = glClearDepthf;
extern fn glClearDepthf(d: float) callconv(APIENTRY) void;
pub const ClearDepthx = glClearDepthx;
extern fn glClearDepthx(depth: fixed) callconv(APIENTRY) void;
pub const ClearStencil = glClearStencil;
extern fn glClearStencil(s: int) callconv(APIENTRY) void;
pub const ClientActiveTexture = glClientActiveTexture;
extern fn glClientActiveTexture(texture: @"enum") callconv(APIENTRY) void;
pub const ClipPlanef = glClipPlanef;
extern fn glClipPlanef(p: @"enum", eqn: [*c]const float) callconv(APIENTRY) void;
pub const ClipPlanex = glClipPlanex;
extern fn glClipPlanex(plane: @"enum", equation: [*c]const fixed) callconv(APIENTRY) void;
pub const Color4f = glColor4f;
extern fn glColor4f(red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void;
pub const Color4ub = glColor4ub;
extern fn glColor4ub(red: ubyte, green: ubyte, blue: ubyte, alpha: ubyte) callconv(APIENTRY) void;
pub const Color4x = glColor4x;
extern fn glColor4x(red: fixed, green: fixed, blue: fixed, alpha: fixed) callconv(APIENTRY) void;
pub const ColorMask = glColorMask;
extern fn glColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean) callconv(APIENTRY) void;
pub const ColorPointer = glColorPointer;
extern fn glColorPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void;
pub const CompressedTexImage2D = glCompressedTexImage2D;
extern fn glCompressedTexImage2D(target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const CompressedTexSubImage2D = glCompressedTexSubImage2D;
extern fn glCompressedTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void;
pub const CopyTexImage2D = glCopyTexImage2D;
extern fn glCopyTexImage2D(target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, height: sizei, border: int) callconv(APIENTRY) void;
pub const CopyTexSubImage2D = glCopyTexSubImage2D;
extern fn glCopyTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
pub const CullFace = glCullFace;
extern fn glCullFace(mode: @"enum") callconv(APIENTRY) void;
pub const DeleteBuffers = glDeleteBuffers;
extern fn glDeleteBuffers(n: sizei, buffers: [*]const uint) callconv(APIENTRY) void;
pub const DeleteTextures = glDeleteTextures;
extern fn glDeleteTextures(n: sizei, textures: [*]const uint) callconv(APIENTRY) void;
pub const DepthFunc = glDepthFunc;
extern fn glDepthFunc(func: @"enum") callconv(APIENTRY) void;
pub const DepthMask = glDepthMask;
extern fn glDepthMask(flag: boolean) callconv(APIENTRY) void;
pub const DepthRangef = glDepthRangef;
extern fn glDepthRangef(n: float, f: float) callconv(APIENTRY) void;
pub const DepthRangex = glDepthRangex;
extern fn glDepthRangex(n: fixed, f: fixed) callconv(APIENTRY) void;
pub const Disable = glDisable;
extern fn glDisable(cap: @"enum") callconv(APIENTRY) void;
pub const DisableClientState = glDisableClientState;
extern fn glDisableClientState(array: @"enum") callconv(APIENTRY) void;
pub const DrawArrays = glDrawArrays;
extern fn glDrawArrays(mode: @"enum", first: int, count: sizei) callconv(APIENTRY) void;
pub const DrawElements = glDrawElements;
extern fn glDrawElements(mode: @"enum", count: sizei, @"type": @"enum", indices: usize) callconv(APIENTRY) void;
pub const Enable = glEnable;
extern fn glEnable(cap: @"enum") callconv(APIENTRY) void;
pub const EnableClientState = glEnableClientState;
extern fn glEnableClientState(array: @"enum") callconv(APIENTRY) void;
pub const Finish = glFinish;
extern fn glFinish() callconv(APIENTRY) void;
pub const Flush = glFlush;
extern fn glFlush() callconv(APIENTRY) void;
pub const Fogf = glFogf;
extern fn glFogf(pname: @"enum", param: float) callconv(APIENTRY) void;
pub const Fogfv = glFogfv;
extern fn glFogfv(pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const Fogx = glFogx;
extern fn glFogx(pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const Fogxv = glFogxv;
extern fn glFogxv(pname: @"enum", param: [*c]const fixed) callconv(APIENTRY) void;
pub const FrontFace = glFrontFace;
extern fn glFrontFace(mode: @"enum") callconv(APIENTRY) void;
pub const Frustumf = glFrustumf;
extern fn glFrustumf(l: float, r: float, b: float, t: float, n: float, f: float) callconv(APIENTRY) void;
pub const Frustumx = glFrustumx;
extern fn glFrustumx(l: fixed, r: fixed, b: fixed, t: fixed, n: fixed, f: fixed) callconv(APIENTRY) void;
pub const GenBuffers = glGenBuffers;
extern fn glGenBuffers(n: sizei, buffers: [*]uint) callconv(APIENTRY) void;
pub const GenTextures = glGenTextures;
extern fn glGenTextures(n: sizei, textures: [*]uint) callconv(APIENTRY) void;
pub const GetBooleanv = glGetBooleanv;
extern fn glGetBooleanv(pname: @"enum", data: [*]boolean) callconv(APIENTRY) void;
pub const GetBufferParameteriv = glGetBufferParameteriv;
extern fn glGetBufferParameteriv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetClipPlanef = glGetClipPlanef;
extern fn glGetClipPlanef(plane: @"enum", equation: [*c]float) callconv(APIENTRY) void;
pub const GetClipPlanex = glGetClipPlanex;
extern fn glGetClipPlanex(plane: @"enum", equation: [*c]fixed) callconv(APIENTRY) void;
pub const GetError = glGetError;
extern fn glGetError() callconv(APIENTRY) @"enum";
pub const GetFixedv = glGetFixedv;
extern fn glGetFixedv(pname: @"enum", params: [*c]fixed) callconv(APIENTRY) void;
pub const GetFloatv = glGetFloatv;
extern fn glGetFloatv(pname: @"enum", data: [*]float) callconv(APIENTRY) void;
pub const GetIntegerv = glGetIntegerv;
extern fn glGetIntegerv(pname: @"enum", data: [*]int) callconv(APIENTRY) void;
pub const GetLightfv = glGetLightfv;
extern fn glGetLightfv(light: @"enum", pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetLightxv = glGetLightxv;
extern fn glGetLightxv(light: @"enum", pname: @"enum", params: [*c]fixed) callconv(APIENTRY) void;
pub const GetMaterialfv = glGetMaterialfv;
extern fn glGetMaterialfv(face: @"enum", pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetMaterialxv = glGetMaterialxv;
extern fn glGetMaterialxv(face: @"enum", pname: @"enum", params: [*c]fixed) callconv(APIENTRY) void;
pub const GetPointerv = glGetPointerv;
extern fn glGetPointerv(pname: @"enum", params: [*c]?*anyopaque) callconv(APIENTRY) void;
pub const GetString = glGetString;
extern fn glGetString(name: @"enum") callconv(APIENTRY) ?[*:0]const ubyte;
pub const GetTexEnvfv = glGetTexEnvfv;
extern fn glGetTexEnvfv(target: @"enum", pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetTexEnviv = glGetTexEnviv;
extern fn glGetTexEnviv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetTexEnvxv = glGetTexEnvxv;
extern fn glGetTexEnvxv(target: @"enum", pname: @"enum", params: [*c]fixed) callconv(APIENTRY) void;
pub const GetTexParameterfv = glGetTexParameterfv;
extern fn glGetTexParameterfv(target: @"enum", pname: @"enum", params: [*c]float) callconv(APIENTRY) void;
pub const GetTexParameteriv = glGetTexParameteriv;
extern fn glGetTexParameteriv(target: @"enum", pname: @"enum", params: [*c]int) callconv(APIENTRY) void;
pub const GetTexParameterxv = glGetTexParameterxv;
extern fn glGetTexParameterxv(target: @"enum", pname: @"enum", params: [*c]fixed) callconv(APIENTRY) void;
pub const Hint = glHint;
extern fn glHint(target: @"enum", mode: @"enum") callconv(APIENTRY) void;
pub const IsBuffer = glIsBuffer;
extern fn glIsBuffer(buffer: uint) callconv(APIENTRY) boolean;
pub const IsEnabled = glIsEnabled;
extern fn glIsEnabled(cap: @"enum") callconv(APIENTRY) boolean;
pub const IsTexture = glIsTexture;
extern fn glIsTexture(texture: uint) callconv(APIENTRY) boolean;
pub const Lightf = glLightf;
extern fn glLightf(light: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void;
pub const Lightfv = glLightfv;
extern fn glLightfv(light: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const Lightx = glLightx;
extern fn glLightx(light: @"enum", pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const Lightxv = glLightxv;
extern fn glLightxv(light: @"enum", pname: @"enum", params: [*c]const fixed) callconv(APIENTRY) void;
pub const LightModelf = glLightModelf;
extern fn glLightModelf(pname: @"enum", param: float) callconv(APIENTRY) void;
pub const LightModelfv = glLightModelfv;
extern fn glLightModelfv(pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const LightModelx = glLightModelx;
extern fn glLightModelx(pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const LightModelxv = glLightModelxv;
extern fn glLightModelxv(pname: @"enum", param: [*c]const fixed) callconv(APIENTRY) void;
pub const LineWidth = glLineWidth;
extern fn glLineWidth(width: float) callconv(APIENTRY) void;
pub const LineWidthx = glLineWidthx;
extern fn glLineWidthx(width: fixed) callconv(APIENTRY) void;
pub const LoadIdentity = glLoadIdentity;
extern fn glLoadIdentity() callconv(APIENTRY) void;
pub const LoadMatrixf = glLoadMatrixf;
extern fn glLoadMatrixf(m: [*c]const float) callconv(APIENTRY) void;
pub const LoadMatrixx = glLoadMatrixx;
extern fn glLoadMatrixx(m: [*c]const fixed) callconv(APIENTRY) void;
pub const LogicOp = glLogicOp;
extern fn glLogicOp(opcode: @"enum") callconv(APIENTRY) void;
pub const Materialf = glMaterialf;
extern fn glMaterialf(face: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void;
pub const Materialfv = glMaterialfv;
extern fn glMaterialfv(face: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const Materialx = glMaterialx;
extern fn glMaterialx(face: @"enum", pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const Materialxv = glMaterialxv;
extern fn glMaterialxv(face: @"enum", pname: @"enum", param: [*c]const fixed) callconv(APIENTRY) void;
pub const MatrixMode = glMatrixMode;
extern fn glMatrixMode(mode: @"enum") callconv(APIENTRY) void;
pub const MultMatrixf = glMultMatrixf;
extern fn glMultMatrixf(m: [*c]const float) callconv(APIENTRY) void;
pub const MultMatrixx = glMultMatrixx;
extern fn glMultMatrixx(m: [*c]const fixed) callconv(APIENTRY) void;
pub const MultiTexCoord4f = glMultiTexCoord4f;
extern fn glMultiTexCoord4f(target: @"enum", s: float, t: float, r: float, q: float) callconv(APIENTRY) void;
pub const MultiTexCoord4x = glMultiTexCoord4x;
extern fn glMultiTexCoord4x(texture: @"enum", s: fixed, t: fixed, r: fixed, q: fixed) callconv(APIENTRY) void;
pub const Normal3f = glNormal3f;
extern fn glNormal3f(nx: float, ny: float, nz: float) callconv(APIENTRY) void;
pub const Normal3x = glNormal3x;
extern fn glNormal3x(nx: fixed, ny: fixed, nz: fixed) callconv(APIENTRY) void;
pub const NormalPointer = glNormalPointer;
extern fn glNormalPointer(@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void;
pub const Orthof = glOrthof;
extern fn glOrthof(l: float, r: float, b: float, t: float, n: float, f: float) callconv(APIENTRY) void;
pub const Orthox = glOrthox;
extern fn glOrthox(l: fixed, r: fixed, b: fixed, t: fixed, n: fixed, f: fixed) callconv(APIENTRY) void;
pub const PixelStorei = glPixelStorei;
extern fn glPixelStorei(pname: @"enum", param: int) callconv(APIENTRY) void;
pub const PointParameterf = glPointParameterf;
extern fn glPointParameterf(pname: @"enum", param: float) callconv(APIENTRY) void;
pub const PointParameterfv = glPointParameterfv;
extern fn glPointParameterfv(pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const PointParameterx = glPointParameterx;
extern fn glPointParameterx(pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const PointParameterxv = glPointParameterxv;
extern fn glPointParameterxv(pname: @"enum", params: [*c]const fixed) callconv(APIENTRY) void;
pub const PointSize = glPointSize;
extern fn glPointSize(size: float) callconv(APIENTRY) void;
pub const PointSizex = glPointSizex;
extern fn glPointSizex(size: fixed) callconv(APIENTRY) void;
pub const PolygonOffset = glPolygonOffset;
extern fn glPolygonOffset(factor: float, units: float) callconv(APIENTRY) void;
pub const PolygonOffsetx = glPolygonOffsetx;
extern fn glPolygonOffsetx(factor: fixed, units: fixed) callconv(APIENTRY) void;
pub const PopMatrix = glPopMatrix;
extern fn glPopMatrix() callconv(APIENTRY) void;
pub const PushMatrix = glPushMatrix;
extern fn glPushMatrix() callconv(APIENTRY) void;
pub const ReadPixels = glReadPixels;
extern fn glReadPixels(x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*anyopaque) callconv(APIENTRY) void;
pub const Rotatef = glRotatef;
extern fn glRotatef(angle: float, x: float, y: float, z: float) callconv(APIENTRY) void;
pub const Rotatex = glRotatex;
extern fn glRotatex(angle: fixed, x: fixed, y: fixed, z: fixed) callconv(APIENTRY) void;
pub const SampleCoverage = glSampleCoverage;
extern fn glSampleCoverage(value: float, invert: boolean) callconv(APIENTRY) void;
pub const SampleCoveragex = glSampleCoveragex;
extern fn glSampleCoveragex(value: clampx, invert: boolean) callconv(APIENTRY) void;
pub const Scalef = glScalef;
extern fn glScalef(x: float, y: float, z: float) callconv(APIENTRY) void;
pub const Scalex = glScalex;
extern fn glScalex(x: fixed, y: fixed, z: fixed) callconv(APIENTRY) void;
pub const Scissor = glScissor;
extern fn glScissor(x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
pub const ShadeModel = glShadeModel;
extern fn glShadeModel(mode: @"enum") callconv(APIENTRY) void;
pub const StencilFunc = glStencilFunc;
extern fn glStencilFunc(func: @"enum", ref: int, mask: uint) callconv(APIENTRY) void;
pub const StencilMask = glStencilMask;
extern fn glStencilMask(mask: uint) callconv(APIENTRY) void;
pub const StencilOp = glStencilOp;
extern fn glStencilOp(fail: @"enum", zfail: @"enum", zpass: @"enum") callconv(APIENTRY) void;
pub const TexCoordPointer = glTexCoordPointer;
extern fn glTexCoordPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void;
pub const TexEnvf = glTexEnvf;
extern fn glTexEnvf(target: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void;
pub const TexEnvfv = glTexEnvfv;
extern fn glTexEnvfv(target: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const TexEnvi = glTexEnvi;
extern fn glTexEnvi(target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void;
pub const TexEnviv = glTexEnviv;
extern fn glTexEnviv(target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void;
pub const TexEnvx = glTexEnvx;
extern fn glTexEnvx(target: @"enum", pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const TexEnvxv = glTexEnvxv;
extern fn glTexEnvxv(target: @"enum", pname: @"enum", params: [*c]const fixed) callconv(APIENTRY) void;
pub const TexImage2D = glTexImage2D;
extern fn glTexImage2D(target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void;
pub const TexParameterf = glTexParameterf;
extern fn glTexParameterf(target: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void;
pub const TexParameterfv = glTexParameterfv;
extern fn glTexParameterfv(target: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void;
pub const TexParameteri = glTexParameteri;
extern fn glTexParameteri(target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void;
pub const TexParameteriv = glTexParameteriv;
extern fn glTexParameteriv(target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void;
pub const TexParameterx = glTexParameterx;
extern fn glTexParameterx(target: @"enum", pname: @"enum", param: fixed) callconv(APIENTRY) void;
pub const TexParameterxv = glTexParameterxv;
extern fn glTexParameterxv(target: @"enum", pname: @"enum", params: [*c]const fixed) callconv(APIENTRY) void;
pub const TexSubImage2D = glTexSubImage2D;
extern fn glTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void;
pub const Translatef = glTranslatef;
extern fn glTranslatef(x: float, y: float, z: float) callconv(APIENTRY) void;
pub const Translatex = glTranslatex;
extern fn glTranslatex(x: fixed, y: fixed, z: fixed) callconv(APIENTRY) void;
pub const VertexPointer = glVertexPointer;
extern fn glVertexPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void;
pub const Viewport = glViewport;
extern fn glViewport(x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void;
//#endregion Commands

test {
    @setEvalBranchQuota(1_000_000);
    std.testing.refAllDeclsRecursive(@This());
}
